# Docker Compose file format version
# https://docs.docker.com/compose/compose-file/compose-versioning/
version: "3.8"

volumes:
  # A named volume for the WordPress database. Without it, a volume will be created but it is deleted when containers are deleted.
  wpdb:
services:
  nginx:
    # The official nginx image https://hub.docker.com/_/nginx
    image: nginx:1.23.2
    ports:
      # Our app works from http://localhost from a port defined in the /.env file
      # 8080 is set in custom config file copied to the nginx image)
      - "$NGINX_PORT:8080"
    volumes:
      # Makes app code visible to nginx by bind-mounting local directory onto container
      - ./:/app-mount
      # Config file
      - ./.local/nginx/site.conf:/etc/nginx/conf.d/site.conf
    # Making sure that necessary services are running
    depends_on:
      - php
      - mysql
  php:
    # An image we built using the official php-fpm image (see .local/php/Dockerfile)
    image: wp/php:8.1.12
    environment:
      - WP_ENV=development
      - WP_HOME=$WP_HOME
      - PHP_ERROR_LEVEL=$PHP_ERROR_LEVEL
      - ACF_PRO_LICENSE_KEY=$ACF_PRO_LICENSE_KEY
    volumes:
      # Directory must be mounted to the PHP container as well
      - ./:/app-mount
  mysql:
    image: mariadb:10.9.4
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=wordpress
    volumes:
      - wpdb:/var/lib/mysql
  node:
    image: node:18.12.1-alpine3.16
    ports:
      # Exposing port because we use webpack-dev-server to automatically reload when Javascript or CSS changes
      - "3000:3000"
    volumes:
      - ./:/usr/src
    # Directory in which the command on the next line is run
    working_dir: /usr/src
    command: npm run dev
  elasticsearch:
    image: elasticsearch:8.5.3
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
